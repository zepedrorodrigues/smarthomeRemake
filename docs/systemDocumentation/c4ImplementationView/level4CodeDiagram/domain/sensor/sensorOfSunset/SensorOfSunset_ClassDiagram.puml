@startuml

title Sensor of Sunset\nDomain Class Diagram - Component\nSystem / BackEnd / Domain\n(Implementation View Level 4)

/'
As Product Owner, I want the system to have a type of sensor
that gives the sunset instant for a given calendar date.
'/

interface Sensor {
    + getIdentity() : SensorId
    + getSensorModelName() : SensorModelName
    + getValue() : Value
    + getDeviceId() : DeviceId
}

class SensorId{
    - sensorId : String
    + SensorId(...)
    + getSensorId() : String
}

interface Value{
    + valueToString() : String
}

class SunsetValue {
    - sunsetValue : LocalDateTime
    + SunsetValue(...)
    + valueToString() : String
}

class SensorModelName{
    - sensorModelName : String
    + SensorModelName(...)
    + getSensorModelName() : String
}

class SensorType {
    + SensorType(...)
    + getIdentity() : SensorTypeId
    + getSensorTypeName() : SensorTypeName
    + getSensorTypeUnit() : SensorTypeUnit
}

class SensorTypeName{
    - sensorTypeName : String
    + SensorTypeName(...)
    + getSensorTypeName() : String
}

class SensorTypeUnit{
    - sensorTypeUnit : String
    + SensorTypeUnit(...)
    + getSensorTypeUnit() : String
}

class SensorModel{
    + SensorModel(...)
    + getIdentity() : SensorModelName
    + getSensorTypeId() : SensorTypeId
}

class SensorTypeId{
    - sensorTypeId : String
    + SensorTypeId(...)
    + getSensorTypeId() : String
}

class DeviceId{
    - deviceId : String
    + DeviceId(...)
    + getIdentity() : String
}

interface ISensorRepository {
    + save(...) : Sensor
    + findAll() : Iterable<Sensor>
    + findByIdentity(...) : Optional<Sensor>
    + containsIdentity(...) : boolean
    + findSensorsByDeviceId(...) : Iterable<Sensor>
    + findSensorsByDeviceIdAndSensorModelName(...) : Iterable<Sensor>
    + findSensorIdsByDeviceIdAndSensorModelName(...) : Iterable<SensorId>
}

interface ISensorTypeRepository {
    + save(...) : SensorType
    + findAll() : Iterable<SensorType>
    + findByIdentity(...) : Optional<SensorType>
    + containsIdentity(...) : boolean
    + findSensorTypeIds() : Iterable<SensorTypeId>
}

interface ISensorModelRepository {
    + save(...) : SensorModel
    + findAll() : Iterable<SensorModel>
    + findByIdentity(...) : Optional<SensorModel>
    + containsIdentity(...) : boolean
    + findSensorModelsBySensorTypeId(...) : Iterable<SensorModel>
    + findSensorModelNamesBySensorTypeId(...) : Iterable<SensorModelName>
}

class SensorOfSunset {
    + SensorOfSunset()
    + getIdentity() : SensorId
    + getSensorModelName() : SensorModelName
    + getValue() : Value
    + getValue(...) : Value
    + getDeviceId() : DeviceId
}

SunsetValue .up.|> Value : implements
SensorOfSunset .up.|> Sensor : implements
SensorOfSunset *-- "1" SensorId : contains
SensorOfSunset ..> "1" Value : uses
SensorOfSunset *-- "1" SensorModelName : contains
SensorOfSunset *-right- "1" DeviceId : contains
SensorModel *-- "1" SensorModelName : contains
SensorModel *-- "1" SensorTypeId : contains
SensorType *-- "1" SensorTypeId: contains
SensorType *-- "1" SensorTypeName : contains
SensorType *-- "1" SensorTypeUnit : contains
ISensorRepository *-- "*" Sensor : contains
ISensorTypeRepository *-- "*" SensorType : contains
ISensorModelRepository *-- "*" SensorModel : contains

@enduml