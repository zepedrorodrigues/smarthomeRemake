@startuml
'https://plantuml.com/class-diagram

title Actuator Of Limiter\nDomain Class Diagram - Component\nSystem / BackEnd / Domain\n(Implementation View Level 4)

/'
As Product Owner, I want the system to have a type of actuator that sets an
integer value in the range defined by [lower limit, upper limit].
'/

interface Actuator {
+ operate() : Value
+ getIdentity() : ActuatorId
+ getActuatorModelName() : ActuatorModelName
+ getDeviceId() : DeviceId
}

interface ActuatorFactory{
+ createActuator(...) : Actuator
}

class ActuatorOfLimiterFactory{
+ createActuator(...) : Actuator
}

class IntLimit {
- limit : int
+ IntLimit(...)
+ getLimit() : int
}

class ActuatorId {
- actuatorId : String
+ ActuatorId(...)
+ getActuatorId() : String
}

class ActuatorModelName {
- actuatorModelName : String
+ ActuatorModelName(...)
+ getActuatorModelName() : String
}

class ActuatorType {
+ ActuatorType(...)
+ getIdentity() : ActuatorTypeName
}

class ActuatorTypeName {
- actuatorTypeName : String
+ ActuatorTypeName(...)
+ getActuatorTypeName() : String
}

class ActuatorModel {
+ ActuatorModel(...)
+ getIdentity() : ActuatorModelName
}

interface IActuatorRepository {
+ save(Actuator) : Actuator
+ findAll() : Iterable<Actuator>
+ findByIdentity(ActuatorId) : Optional<Actuator>
+ containsIdentity(ActuatorId) : boolean
+ findActuatorIdsByDeviceId(DeviceId) : Iterable<ActuatorId>
}

interface IActuatorTypeRepository {
+ save(ActuatorType) : ActuatorType
+ findAll() : Iterable<ActuatorType>
+ findByIdentity(ActuatorTypeId) : Optional<ActuatorType>
+ containsIdentity(ActuatorTypeId) : boolean
+ findActuatorTypeNames() : Iterable<ActuatorTypeName>
}

interface IActuatorModelRepository {
+ save(ActuatorModel) : ActuatorModel
+ findAll() : Iterable<ActuatorModel>
+ findByIdentity(ActuatorModelName) : Optional<ActuatorModel>
+ containsIdentity(ActuatorModelName) : boolean
+ findActuatorModelsByActuatorTypeName(ActuatorTypeName) : Iterable<ActuatorModel>
+ findActuatorModelNamesByActuatorTypeName(ActuatorTypeName) : Iterable<ActuatorModelName>
}

class DeviceId{
- deviceId : String
+ DeviceId(...)
+ getDeviceId() : String
}

class ActuatorOfLimiter {
+ ActuatorOfLimiter(...)
+ operate(...) : Value
+ getIdentity() : ActuatorId
+ getActuatorModelName() : ActuatorModelName
+ getDeviceId() : DeviceId
}


ActuatorFactory "1" .l.> "1" ActuatorOfLimiterFactory : implements
ActuatorOfLimiter "1" ..> "1" DeviceId : knows

ActuatorModel "1" *-- "1" ActuatorModelName : contains
ActuatorModel "1" ..> "1" ActuatorTypeName: knows
ActuatorOfLimiter "1" ..> "1" ActuatorModelName : knows

ActuatorOfLimiter "1" *-- "1" ActuatorId : contains

ActuatorType "1" *-- "1" ActuatorTypeName : contains
ActuatorOfLimiter "1" ..|> "1" Actuator : implements


IActuatorRepository "1" *-- "*" Actuator : contains
IActuatorTypeRepository "1" *-- "*" ActuatorType : contains
IActuatorModelRepository "1" *-- "*" ActuatorModel : contains

ActuatorOfLimiter "1" *-- "1" IntLimit : contains
ActuatorOfLimiter "1" *-- "1" IntLimit : contains




@enduml